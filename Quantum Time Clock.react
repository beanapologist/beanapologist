import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from 'recharts';
import { Clock, Activity, Shield, Globe, Zap, Sparkles } from 'lucide-react';

const ComprehensiveQuantumClock = () => {
  // Physical constants
  const PHI = (1 + Math.sqrt(5)) / 2; // Golden ratio
  const C = 299792458; // Speed of light in m/s
  const G = 6.67430e-11; // Gravitational constant
  const EARTH_RADIUS = 6371000; // Earth's radius in meters
  const EARTH_MASS = 5.972e24; // Earth's mass in kg
  const EARTH_ANGULAR_VELOCITY = 7.2921159e-5; // Earth's angular velocity in rad/s
  
  const [location, setLocation] = useState({
    latitude: 0,
    longitude: 0,
    altitude: 0,
    loaded: false
  });

  const [currentTime, setCurrentTime] = useState(new Date());
  const [timeHistory, setTimeHistory] = useState([]);
  
  // Comprehensive metrics state
  const [metrics, setMetrics] = useState({
    // Quantum metrics
    crystalFrequency: 1e9,
    quantumPhase: 1,
    synchronization: 1,
    coherenceTime: 100e-6,
    operationFidelity: 0.9999,
    quantumStability: 1,
    warpFactor: 0.8,
    
    // Time crystal metrics
    phaseStability: 0.95,
    realityIntegrity: 0.5,
    timeWarp: 0.8,
    quantumCoupling: 0.99999,
    
    // Relativistic corrections
    gravitationalShift: 0,
    rotationalShift: 0,
    quantumCorrection: 0,
    totalCorrection: 0,
    
    // System status
    errorRate: 1e-5,
    systemCoherence: 1,
    phaseAlignment: 1,
    stabilityIndex: 1,
    
    // Lambda stabilization
    lambdaCoupling: 0.99999,
    purityLevel: 0.99999,
    energyState: 0.9995
  });

  useEffect(() => {
    // Get user's location
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setLocation({
            latitude: position.coords.latitude,
            longitude: position.coords.longitude,
            altitude: position.coords.altitude || 0,
            loaded: true
          });
        },
        (error) => {
          console.error('Geolocation error:', error);
          setLocation(prev => ({ ...prev, loaded: true }));
        }
      );
    }
  }, []);

  // Calculate all metrics based on location and time
  const calculateMetrics = (timestamp) => {
    const t = timestamp / 1000;
    const latRad = (location.latitude * Math.PI) / 180;
    
    // Calculate relativistic effects
    const r = EARTH_RADIUS + location.altitude;
    const gravitationalPotential = (G * EARTH_MASS) / r;
    const gravitationalDilation = Math.sqrt(1 - (2 * gravitationalPotential) / (C * C));
    const rotationalVelocity = EARTH_ANGULAR_VELOCITY * r * Math.cos(latRad);
    const rotationalDilation = Math.sqrt(1 - (rotationalVelocity * rotationalVelocity) / (C * C));
    
    // Quantum calculations
    const quantumPhase = Math.abs(Math.cos(t * PHI));
    const crystalFreq = 1e9 * (1 + 0.00001 * Math.sin(t * PHI));
    const coherenceTime = 100e-6 * (1 + 0.1 * Math.cos(t / PHI));
    const stability = 0.99999 * Math.exp(-Math.pow(Math.sin(t * PHI), 2));
    
    // Lambda stabilization
    const lambdaBase = 0.99999;
    const purityLevel = lambdaBase * stability;
    
    return {
      // Quantum metrics
      crystalFrequency: crystalFreq,
      quantumPhase,
      synchronization: stability,
      coherenceTime,
      operationFidelity: 0.9999 * stability,
      quantumStability: stability,
      warpFactor: 0.8 * stability,
      
      // Time crystal metrics
      phaseStability: 0.95 * stability,
      realityIntegrity: 0.5 * stability,
      timeWarp: 0.8 * stability,
      quantumCoupling: 0.99999 * stability,
      
      // Relativistic corrections
      gravitationalShift: (1 - gravitationalDilation) * 1e9,
      rotationalShift: (1 - rotationalDilation) * 1e9,
      quantumCorrection: Math.sin(t * PHI + latRad) * 1e9,
      totalCorrection: ((1 - gravitationalDilation) + 
                       (1 - rotationalDilation) + 
                       Math.sin(t * PHI + latRad)) * 1e9,
      
      // System status
      errorRate: (1 - stability) * 1e-5,
      systemCoherence: stability,
      phaseAlignment: quantumPhase,
      stabilityIndex: stability,
      
      // Lambda stabilization
      lambdaCoupling: lambdaBase * stability,
      purityLevel,
      energyState: 0.9995 * stability
    };
  };

  useEffect(() => {
    const updateClock = () => {
      const now = new Date();
      const t = now.getTime();
      
      // Calculate all metrics
      const newMetrics = calculateMetrics(t);
      setMetrics(newMetrics);
      
      // Apply corrections to time
      const correctedTime = new Date(t + newMetrics.totalCorrection / 1e6);
      setCurrentTime(correctedTime);
      
      // Update history
      setTimeHistory(prev => [...prev.slice(-50), {
        timestamp: t / 1000,
        ...newMetrics
      }]);
    };

    const interval = setInterval(updateClock, 16.67); // 60Hz update
    return () => clearInterval(interval);
  }, [location]);

  const formatTime = (time) => ({
    hours: time.getHours().toString().padStart(2, '0'),
    minutes: time.getMinutes().toString().padStart(2, '0'),
    seconds: time.getSeconds().toString().padStart(2, '0'),
    milliseconds: time.getMilliseconds().toString().padStart(3, '0')
  });

  const time = formatTime(currentTime);

  // Metric card component
  const MetricCard = ({ title, value, unit = '%', precision = 4 }) => (
    <div className="p-4 border border-violet-500 rounded-lg bg-black/30">
      <div className="text-sm font-medium text-violet-300">{title}</div>
      <div className="text-xl font-bold text-violet-400">
        {typeof value === 'number' ? 
          (unit === '%' ? (value * 100).toFixed(precision) : value.toFixed(precision)) : value}
        {unit}
      </div>
    </div>
  );

  return (
    <Card className="w-full p-6 bg-gradient-to-r from-violet-950 to-indigo-950 text-white">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-2">
          <Clock className="w-8 h-8 text-violet-400" />
          <h2 className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-violet-400 to-indigo-400">
            Quantum Time Crystal Clock
          </h2>
        </div>
        <div className="flex items-center gap-2">
          <Globe className="w-6 h-6 text-blue-400" />
          <Shield className="w-6 h-6 text-green-400" />
          <Activity className="w-6 h-6 text-violet-400 animate-pulse" />
        </div>
      </div>

      {/* Location Display */}
      <div className="mb-4 p-4 border border-violet-500 rounded-lg bg-black/30">
        <div className="grid grid-cols-2 gap-4">
          <div>
            <span className="text-violet-300">Latitude: </span>
            <span className="text-violet-400">{location.latitude.toFixed(6)}°</span>
          </div>
          <div>
            <span className="text-violet-300">Longitude: </span>
            <span className="text-violet-400">{location.longitude.toFixed(6)}°</span>
          </div>
        </div>
      </div>

      {/* Clock Display */}
      <div className="mb-6">
        <div className="text-6xl font-bold text-center font-mono bg-black/30 rounded-lg p-6 border border-violet-500">
          <span className="text-violet-400">{time.hours}</span>
          <span className="text-white animate-pulse">:</span>
          <span className="text-violet-400">{time.minutes}</span>
          <span className="text-white animate-pulse">:</span>
          <span className="text-violet-400">{time.seconds}</span>
          <span className="text-violet-600">.</span>
          <span className="text-violet-600 text-4xl">{time.milliseconds}</span>
        </div>
      </div>

      {/* Primary Metrics */}
      <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 mb-6">
        <MetricCard title="Crystal Frequency" value={metrics.crystalFrequency / 1e9} unit=" GHz" />
        <MetricCard title="Quantum Phase" value={metrics.quantumPhase} />
        <MetricCard title="Synchronization" value={metrics.synchronization} />
        <MetricCard title="Coherence Time" value={metrics.coherenceTime * 1e6} unit=" μs" />
        <MetricCard title="Operation Fidelity" value={metrics.operationFidelity} />
        <MetricCard title="Quantum Stability" value={metrics.quantumStability} />
      </div>

      {/* Time Crystal Metrics */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <MetricCard title="Phase Stability" value={metrics.phaseStability} />
        <MetricCard title="Reality Integrity" value={metrics.realityIntegrity} />
        <MetricCard title="Time Warp" value={metrics.timeWarp} />
        <MetricCard title="Quantum Coupling" value={metrics.quantumCoupling} />
      </div>

      {/* Relativistic Corrections */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <MetricCard title="Gravitational Shift" value={metrics.gravitationalShift} unit=" ns" />
        <MetricCard title="Rotational Shift" value={metrics.rotationalShift} unit=" ns" />
        <MetricCard title="Quantum Correction" value={metrics.quantumCorrection} unit=" ns" />
        <MetricCard title="Total Correction" value={metrics.totalCorrection} unit=" ns" />
      </div>

      {/* System Status */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <MetricCard title="Error Rate" value={metrics.errorRate} unit="e-5" />
        <MetricCard title="System Coherence" value={metrics.systemCoherence} />
        <MetricCard title="Phase Alignment" value={metrics.phaseAlignment} />
        <MetricCard title="Stability Index" value={metrics.stabilityIndex} />
      </div>

      {/* Lambda Stabilization */}
      <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-6">
        <MetricCard title="Lambda Coupling" value={metrics.lambdaCoupling} />
        <MetricCard title="Purity Level" value={metrics.purityLevel} />
        <MetricCard title="Energy State" value={metrics.energyState} />
      </div>

      {/* Visualization */}
      <div className="h-64 border border-violet-500 rounded-lg bg-black/30 p-4">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={timeHistory}>
            <CartesianGrid strokeDasharray="3 3" stroke="rgba(139, 92, 246, 0.2)" />
            <XAxis 
              dataKey="timestamp"
              tickFormatter={(value) => new Date(value * 1000).toLocaleTimeString()}
              stroke="#8B5CF6"
            />
            <YAxis domain={[0.99990, 1.00010]} stroke="#8B5CF6" />
            <Tooltip 
              contentStyle={{ 
                backgroundColor: 'rgba(15, 23, 42, 0.9)',
                border: '1px solid #8B5CF6',
                borderRadius: '8px'
              }}
              labelFormatter={(value) => new Date(value * 1000).toLocaleTimeString()}
            />
            <Legend />
            <Line type="monotone" dataKey="quantumStability" stroke="#8B5CF6" name="Stability" dot={false} />
            <Line type="monotone" dataKey="synchronization" stroke="#EC4899" name="Sync" dot={false} />
            <Line type="monotone" dataKey="purityLevel" stroke="#60A5FA" name="Purity" dot={false} />
            <Line type="monotone" dataKey="phaseAlignment" stroke="#34D399" name="Phase" dot={false} />
          </LineChart>
        </ResponsiveContainer>
      </div>

      {/* Status Footer */}
      <div className="mt-4 text-sm text-violet-300 flex justify-between items-center">
        <div className="flex items-center gap-2">
          <div className="w-2 h-2 rounded-full bg-green-400 animate-pulse"></div>
          <span>Quantum-Relativistic Synchronized</span>
        </div>
        <div>
          φ = {PHI.toFixed(6)}
        </div>
        <div>
          Time Crystal Active
        </div>
      </div>
    </Card>
  );
};

export default ComprehensiveQuantumClock;
